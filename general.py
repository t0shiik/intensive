# Зотов Антон Иванович
# 1 вариант
# Общая задача:
#
# Определите класс A, включающий:
# строку документирования класса '''Класс A''';
# метод set_a() для установки значения атрибута a;
# метод get_a() для получения значения этого атрибута.
#
# Определите класс B, включающий:
# строку документирования класса '''Класс B''';
# конструктор, инициализирующий атрибут данных b создаваемых экземпляров;
# метод get_b() для получения значения этого атрибута.
#
# Определите класс C, наследующий классы A (задача №2) и B (задача №3) и включающий:
# строку документирования класса '''Класс C = A + B''';
# конструктор, инициализирующий дополнительно атрибуты данных a и c создаваемых экземпляров;
# собственные методы set_b() и set_c() для установки значений соответствующих атрибутов;
# собственный метод get_c() для получения значения атрибута c
#
# Определите класс D, включающий:
# статический метод stat_print_dict, выводящий на экран словарь атрибутов переданного ему объекта класса;
# метод класса cls_print_dict, выводящий на экран словарь атрибутов своего класса.

class A:
    '''Класс A'''

    def set_a(self, value):
        self.a = value

    def get_a(self):
        return self.a

class B:
    '''Класс B'''

    def __init__(self, b):
        self.b = b

    def get_b(self):
        return self.b

class C(A, B):
    '''Класс C = A + B'''

    def __init__(self, a, b, c):
        super().__init__(b)
        self.set_a(a)
        self.c = c

    def set_b(self, value):
        self.b = value

    def set_c(self, value):
        self.c = value

    def get_c(self):
        return self.c

class D:
    @staticmethod
    def external_print_dict(obj):
        print(obj.__dict__)

    @classmethod
    def my_print_dict(cls):
        print(cls.__dict__)

# Пример использования
# Создание экземпляра класса С
c = C(1, 2, 3)

# Вывод полей экземпляра класса С
print('Значения при инициализации')
print(f'a = {c.get_a()}')
print(f'b = {c.get_b()}')
print(f'c = {c.get_c()}')

# Установка новых значений в поля b и c
c.set_b(4)
c.set_c(5)

# Вывод полей экземпляра класса С
print('Новые значения полей b и с')
print(f'b = {c.get_b()}')
print(f'c = {c.get_c()}')


# Вывод словаря атрибутов экземпляра класса с
print('Словарь атрибутов объекта с')
D.external_print_dict(c)

# Вывод словаря атрибутов класса D
print('Словарь атрибутов класса D')
D.my_print_dict()